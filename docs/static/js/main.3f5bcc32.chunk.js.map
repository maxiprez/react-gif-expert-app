{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","add","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setCategories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGe,SAASA,EAAT,GAAiC,IAATC,EAAQ,EAARA,IAGvC,EAAmCC,mBAAS,IAA5C,mBAAMC,EAAN,KAAkBC,EAAlB,KAiBI,OACE,sBAAMC,SAVS,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAK,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAC9BN,EAAc,MAKhB,SACM,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,mCCRdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCCL,SAASO,EAAT,GAA0C,IAAnBJ,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAG7C,OADAc,QAAQC,IAAKN,EAAIC,EAAOV,GAEpB,sBAAKgB,UAAU,yCAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,OCJA,SAASS,EAAT,GAAkC,IAAdrB,EAAa,EAAbA,SAEhC,ECFY,SAAuBA,GACpC,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAER1B,EAASC,GACP0B,MAAK,SAAAC,GACAH,EAAS,CACTjB,KAAMoB,EACNL,SAAS,SAIhB,CAAEtB,IAEEuB,EDhB2BK,CAAc5B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAIpB,OAFDN,QAAQC,IAAIK,GAGP,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGOL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAACK,EAAD,eAA8BL,GAAZA,EAAIC,YEhB/B,SAASkB,IAGxB,MAAoC3C,mBAAS,CAAC,mBAA9C,mBAAO4C,EAAP,KAAmBC,EAAnB,KAGI,OACI,qCACI,8CACA,cAAC/C,EAAD,CAAaC,IAAM8C,IACnB,uBAEA,6BAEQD,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAACqB,EAAD,CAEArB,SAAUA,GADLA,W,UCRdgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACL,cAACZ,EAAD,IACFa,SAASC,eAAe,SAM1BX,M","file":"static/js/main.3f5bcc32.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function AddCategory( { add } ) {\r\n\r\n\r\nconst[inputValue, setInputValue] = useState('');\r\n\r\nconst handleInputChange = (e)  => {\r\n    setInputValue(e.target.value);\r\n    //console.log(e.target.value)\r\n}\r\n\r\n//Funcion para prevenir que se actualice el navegador cuando hacemos enter\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if ( inputValue.trim().length > 2 ) {\r\n        add( cats => [ inputValue, ...cats]  );\r\n        setInputValue('');\r\n    }    \r\n}\r\n\r\n    return (\r\n      <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                />\r\n      </form> \r\n       \r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    add: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)  }&api_key=y5Cf43NheYQrq72eHbfn2BZBlSNoS8fF&limit=15`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport default function GifGridItem( {id, title, url} ) {\r\n\r\n    console.log( id, title, url );\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n           <img src={url} alt={title} />\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport  useFetchGifs  from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport default function GifGrid( { category } ) {\r\n\r\n   const { data:images, loading } = useFetchGifs( category );\r\n   //console.log(data);    \r\n   console.log(loading); \r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>Loading...</p> }\r\n\r\n             <div className='card-grid'>\r\n\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem key={img.id} {...img} />\r\n                    ))\r\n                }\r\n                \r\n            </div> \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\n\r\nexport default function useFetchGifs( category ) {\r\n  const [state, setState] = useState({\r\n      data: [],\r\n      loading: true\r\n  });\r\n\r\n  useEffect( () => {\r\n\r\n     getGifs( category )\r\n      .then(imgs => {\r\n            setState({\r\n            data: imgs,\r\n            loading: false\r\n        });\r\n      })\r\n\r\n  }, [ category ])\r\n\r\n  return state; \r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nexport default function GifExpertApp() {\r\n\r\n\r\nconst [categories, setCategories] = useState(['rick and morty']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory add={ setCategories } />\r\n            <hr />\r\n           \r\n            <ul>\r\n                {\r\n                    categories.map( category =>(\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={category}/>\r\n                       )\r\n                    )}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}